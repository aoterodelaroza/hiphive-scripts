## 2-calculate_harmonic_fc2.py: train a harmonic (FC2) model to the
## structures generated by simple rattling using least squares. The
## resulting fc2 can be used for the more sophisticated phonon rattle.
##
## Input: prefix.info, forces in */
## Output: prefix.fc2_harmonic

## input block ##
prefix="blah" ## prefix for the generated files
outputs="blah-1000-1/*scf.out" ## regular expression for the files
#################

from glob import glob
import pickle
import numpy as np
import ase
from hiphive import ClusterSpace, StructureContainer, ForceConstantPotential
from hiphive.utilities import get_displacements
from hiphive.cutoffs import estimate_maximum_cutoff
from trainstation import Optimizer
## from phonopy import Phonopy
## from phonopy.structure.atoms import PhonopyAtoms

# load the info file
with open(prefix + ".info","rb") as f:
    ## EB units added
    calculator, phcalc, ncell, cell, scel, fc_factor, phcel = pickle.load(f)


# build cluster space with only fc2
cutoffs = [estimate_maximum_cutoff(scel)-1e-4]
cs = ClusterSpace(cell, cutoffs)

# read the forces and build the structure container
sc = StructureContainer(cs)
for fname in glob(outputs):
    atoms = ase.io.read(fname)

    # this is because otherwise the atoms are not in POSCAR order
    displacements = get_displacements(atoms, scel)
    forces = atoms.get_forces()

    # append to the structure container
    atoms_tmp = scel.copy()
    atoms_tmp.new_array('displacements', displacements)
    atoms_tmp.new_array('forces', forces)
    sc.add_structure(atoms_tmp)

# ##print out some details
print("--- structure container details ---")
print(sc)
print("")

## run the training
opt = Optimizer(sc.get_fit_data(),fit_method="least-squares",train_size=1.0)
opt.train()
print(opt)

## save the force constant potential
fcp = ForceConstantPotential(cs, opt.parameters)
fc2 = fcp.get_force_constants(scel).get_fc_array(order=2)
## EB return eV/ag**2 to the corresponding units
fc2 = fc2 / fc_factor
## TO REMOVE
from phonopy.file_IO import write_FORCE_CONSTANTS, write_force_constants_to_hdf5
write_FORCE_CONSTANTS(fc2)
## TO REMOVE
## EB fc2 written with the calculator units
with open(prefix + ".fc2_harmonic","wb") as f:
    pickle.dump(fc2, f)

## calculate list of temperatures (for checking)
## Eeste no lee ficheros si los hay
##  EB already in phcel
## atoms_phonopy = PhonopyAtoms(symbols=cell.get_chemical_symbols(),
##                              scaled_positions=cell.get_scaled_positions(),
##                              cell=cell.cell)
## ph = Phonopy(atoms_phonopy, supercell_matrix=ncell*np.eye(3),
##              primitive_matrix=None,calculator=phcalc)

## EB update phonopy
phcel.force_constants = fc2
phcel.run_mesh([20] * 3)
phcel.run_thermal_properties(temperatures=300)
fvib = phcel.get_thermal_properties_dict()['free_energy'][0]
svib = phcel.get_thermal_properties_dict()['entropy'][0]

print("\nHarmonic properties at 300 K (kJ/mol): fvib = %.3f svib = %.3f\n" % (fvib,svib))
